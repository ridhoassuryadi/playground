{"version":3,"sources":["plugins/index.js","index.js"],"names":["validatorPlugin","minLength","value","length","maxLength","num","Number","isNaN","pattern","regex","RegExp","test","functionToCheck","toString","call","nilai","success","error","Promise","resolve","reject","val","then","v","catch","e","plugins","getValidation","validations","doWhileCheck","convertToPromise","i","rule","errMsg","RESULT_VALIDATOR"],"mappings":"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","file":"index.map","sourceRoot":"../lib","sourcesContent":["const validatorPlugin = {\n    min: function(minLength) {\n        return function(value) {\n            return value.length >= minLength\n        }\n    },\n    max: function(maxLength) {\n        return function(value) {\n            return value.length <= maxLength\n        }\n    },\n    isNumber: function(value) {\n        const num = Number(value)\n        if (\n            typeof num === 'number' &&\n            !isNaN(num) &&\n            typeof value !== 'boolean'\n        ) {\n            return true\n        }\n\n        return false\n    },\n    isMatchingRegExp: function(pattern) {\n        return function(value) {\n            const regex = RegExp(pattern)\n            return regex.test(value)\n        }\n    },\n    isFunction: function(functionToCheck) {\n        return (\n            functionToCheck &&\n            {}.toString.call(functionToCheck) === '[object Function]'\n        )\n    },\n\n    checkWithPromise: function(nilai, success, error) {\n        // contoh\n        const fPromise = function(nilai) {\n            return new Promise(function(resolve, reject) {\n                setTimeout(function() {\n                    if (nilai.length > 3) {\n                        reject('error')\n                    }\n                    resolve('sukses')\n                }, 3000)\n            })\n        }\n\n        fPromise(val)\n            .then((v) => success('done'))\n            .catch((e) => error(e))\n    },\n\n    isAsync: function() {\n        return function(value, resolve, reject) {\n            setTimeout(function() {\n                if (value.length < 3) {\n                    reject('error')\n                }\n\n                resolve('done')\n            }, 3000)\n        }\n    },\n}\n\nexport default validatorPlugin\n","import plugins from './plugins'\n\n/**\n * async {true}\n * @param {Array of Object} validations get from schema\n * @param {Functions} doWhileCheck\n * @param {val}\n */\nconst getValidation = async function(\n    { validations, doWhileCheck },\n    val,\n    resolve,\n    reject\n) {\n    for (var i = 0; i < validations.length; i++) {\n        // Destructuring to get rule and error Message\n        let { rule, errMsg } = validations[i]\n\n        /**\n         * Convert Sync Function, Async Function and Promise to Promise\n         * why must be to convert,\n         * because like this we must not set option { async : true } or another option\n         */\n        let RESULT_VALIDATOR = await convertToPromise((resolve, reject) =>\n            rule('te', resolve, reject)\n        )\n\n        // IF RES\n        if (RESULT_VALIDATOR === 'error') {\n            reject(errMsg)\n            break\n        }\n    }\n}\n\nexport { plugins }\n"]}