// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var container = Css.style(/* :: */[
      Css.display(/* flex */-1010954439),
      /* :: */[
        Css.alignItems(/* center */98248149),
        /* :: */[
          Css.position(/* relative */903134412),
          /* :: */[
            Css.paddingTop(/* `px */[
                  25096,
                  16
                ]),
            /* :: */[
              Css.paddingBottom(/* `px */[
                    25096,
                    16
                  ]),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

function createCheckboxStyle(checked) {
  var base = Css.style(/* :: */[
        Css.position(/* relative */903134412),
        /* :: */[
          Css.cursor(/* pointer */-786317123),
          /* :: */[
            Css.width(/* `px */[
                  25096,
                  16
                ]),
            /* :: */[
              Css.height(/* `px */[
                    25096,
                    16
                  ]),
              /* :: */[
                Css.border(/* `px */[
                      25096,
                      2
                    ], /* solid */12956715, /* `hex */[
                      5194459,
                      "585757"
                    ]),
                /* :: */[
                  Css.borderRadius(/* `px */[
                        25096,
                        2
                      ]),
                  /* :: */[
                    Css.marginRight(/* `px */[
                          25096,
                          12
                        ]),
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]
      ]);
  var styleBaseOnChecked = checked ? Css.style(/* :: */[
          Css.backgroundColor(/* `hex */[
                5194459,
                "585757"
              ]),
          /* [] */0
        ]) : Css.style(/* [] */0);
  return Css.merge(/* :: */[
              base,
              /* :: */[
                styleBaseOnChecked,
                /* [] */0
              ]
            ]);
}

var checkmarkIcon = Css.style(/* :: */[
      Css.position(/* absolute */-1013592457),
      /* :: */[
        Css.top(/* `px */[
              25096,
              2
            ]),
        /* :: */[
          Css.left(/* `px */[
                25096,
                5
              ]),
          /* :: */[
            Css.border(/* `px */[
                  25096,
                  2
                ], /* solid */12956715, /* `hex */[
                  5194459,
                  "fff"
                ]),
            /* :: */[
              Css.borderTopWidth(/* `px */[
                    25096,
                    0
                  ]),
              /* :: */[
                Css.borderRightWidth(/* `px */[
                      25096,
                      2
                    ]),
                /* :: */[
                  Css.borderBottomWidth(/* `px */[
                        25096,
                        2
                      ]),
                  /* :: */[
                    Css.borderLeftWidth(/* `px */[
                          25096,
                          0
                        ]),
                    /* :: */[
                      Css.width(/* `px */[
                            25096,
                            3
                          ]),
                      /* :: */[
                        Css.height(/* `px */[
                              25096,
                              8
                            ]),
                        /* :: */[
                          Css.transform(/* `rotate */[
                                -887077285,
                                /* `deg */[
                                  4995526,
                                  45
                                ]
                              ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var text = Css.style(/* :: */[
      Css.margin(/* zero */-789508312),
      /* :: */[
        Css.fontSize(/* `px */[
              25096,
              24
            ]),
        /* :: */[
          Css.color(/* `hex */[
                5194459,
                "040402"
              ]),
          /* [] */0
        ]
      ]
    ]);

var deleteButton = Css.style(/* :: */[
      Css.position(/* absolute */-1013592457),
      /* :: */[
        Css.top(/* `percent */[
              -119887163,
              50
            ]),
        /* :: */[
          Css.right(/* `px */[
                25096,
                10
              ]),
          /* :: */[
            Css.transform(Css.translate(/* `px */[
                      25096,
                      2
                    ], /* `percent */[
                      -119887163,
                      -50
                    ])),
            /* [] */0
          ]
        ]
      ]
    ]);

var inputText = Css.style(/* :: */[
      Css.fontSize(/* `px */[
            25096,
            24
          ]),
      /* :: */[
        Css.borderColor(/* `hex */[
              5194459,
              "#DCDEDD"
            ]),
        /* :: */[
          Css.padding(/* `rem */[
                5691738,
                0.4
              ]),
          /* :: */[
            Css.borderColor(/* `hex */[
                  5194459,
                  "fff"
                ]),
            /* :: */[
              Css.borderStyle(/* solid */12956715),
              /* :: */[
                Css.focus(/* :: */[
                      Css.outlineWidth(/* zero */-789508312),
                      /* :: */[
                        Css.borderColor(/* `hex */[
                              5194459,
                              "fff"
                            ]),
                        /* [] */0
                      ]
                    ]),
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]);

var Styles = /* module */[
  /* container */container,
  /* createCheckboxStyle */createCheckboxStyle,
  /* checkmarkIcon */checkmarkIcon,
  /* text */text,
  /* deleteButton */deleteButton,
  /* inputText */inputText
];

var component = ReasonReact.reducerComponent("Todo_Item");

function make(todo, onDestroy, onUpdate, onToggle, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* isEdit */0];
              return React.createElement("li", {
                          className: container
                        }, React.createElement("div", {
                              className: createCheckboxStyle(todo[/* checked */2]),
                              onClick: onToggle
                            }, React.createElement("div", {
                                  className: checkmarkIcon
                                })), match ? React.createElement("input", {
                                className: inputText,
                                type: "text",
                                value: self[/* state */1][/* inputEditValue */1],
                                onKeyDown: (function ($$event) {
                                    return Curry._1(self[/* send */3], /* OnKeyDown */Block.__(1, [$$event.which]));
                                  }),
                                onBlur: (function (_event) {
                                    return Curry._1(self[/* send */3], /* OnSaveVal */1);
                                  }),
                                onChange: (function ($$event) {
                                    return Curry._1(self[/* send */3], /* OnChangeVal */Block.__(0, [$$event.target.value]));
                                  })
                              }) : React.createElement("p", {
                                className: text,
                                onDoubleClick: (function (_event) {
                                    return Curry._1(self[/* send */3], /* ToggleEdit */0);
                                  })
                              }, todo[/* title */1]), React.createElement("button", {
                              className: deleteButton,
                              onClick: onDestroy
                            }, "hapus"));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* isEdit */false,
                      /* inputEditValue */todo[/* title */1],
                      /* inputRef : record */[/* contents */undefined]
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action === 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* isEdit */!state[/* isEdit */0],
                              /* inputEditValue */state[/* inputEditValue */1],
                              /* inputRef */state[/* inputRef */2]
                            ]]);
                } else {
                  return /* SideEffects */Block.__(1, [(function (self) {
                                Curry._1(self[/* send */3], /* ToggleEdit */0);
                                return Curry._1(onUpdate, state[/* inputEditValue */1]);
                              })]);
                }
              } else if (action.tag) {
                var num = action[0];
                if (num !== 13) {
                  if (num !== 27) {
                    return /* NoUpdate */0;
                  } else {
                    return /* Update */Block.__(0, [/* record */[
                                /* isEdit */false,
                                /* inputEditValue */state[/* inputEditValue */1],
                                /* inputRef */state[/* inputRef */2]
                              ]]);
                  }
                } else {
                  return /* SideEffects */Block.__(1, [(function (param) {
                                return Curry._1(param[/* send */3], /* OnSaveVal */1);
                              })]);
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* isEdit */state[/* isEdit */0],
                            /* inputEditValue */action[0],
                            /* inputRef */state[/* inputRef */2]
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Styles = Styles;
exports.component = component;
exports.make = make;
/* container Not a pure module */
